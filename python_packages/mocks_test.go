// Code generated by MockGen. DO NOT EDIT.
// Source: python_packages.go

// Package python_packages_test is a generated GoMock package.
package python_packages_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPackageManager is a mock of PackageManager interface
type MockPackageManager struct {
	ctrl     *gomock.Controller
	recorder *MockPackageManagerMockRecorder
}

// MockPackageManagerMockRecorder is the mock recorder for MockPackageManager
type MockPackageManagerMockRecorder struct {
	mock *MockPackageManager
}

// NewMockPackageManager creates a new mock instance
func NewMockPackageManager(ctrl *gomock.Controller) *MockPackageManager {
	mock := &MockPackageManager{ctrl: ctrl}
	mock.recorder = &MockPackageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPackageManager) EXPECT() *MockPackageManagerMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockPackageManager) Install(requirementsPath, location string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", requirementsPath, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockPackageManagerMockRecorder) Install(requirementsPath, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockPackageManager)(nil).Install), requirementsPath, location)
}

// InstallVendor mocks base method
func (m *MockPackageManager) InstallVendor(requirementsPath, location, vendorDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallVendor", requirementsPath, location, vendorDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallVendor indicates an expected call of InstallVendor
func (mr *MockPackageManagerMockRecorder) InstallVendor(requirementsPath, location, vendorDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallVendor", reflect.TypeOf((*MockPackageManager)(nil).InstallVendor), requirementsPath, location, vendorDir)
}
